apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
  namespace: kube-system
data:
  fluent.conf: |
    # We can use this config to load some default config or load user defined config
    @include vrlic.conf
  vrlic.conf: |
    <source>
      @id in_tail_container_logs
      @type tail
      path /var/log/containers/*.log
      pos_file /var/log/containers/fluentd-containers.log.pos
      tag raw.kubernetes.*
      read_from_head true
      <parse>
        @type multi_format
        <pattern>
          format json
          time_key time
          time_format %Y-%m-%dT%H:%M:%S.%NZ
        </pattern>
        <pattern>
          format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/
          time_format %Y-%m-%dT%H:%M:%S.%N%:z
        </pattern>
      </parse>
    </source>

    # Detect exceptions in the log output and forward them as one log entry.
    <match raw.kubernetes.**>
      @id raw.kubernetes
      @type detect_exceptions
      remove_tag_prefix raw
      message log
      stream stream
      multiline_flush_interval 5
      max_bytes 500000
      max_lines 1000
    </match>

    # Concatenate multi-line logs
    <filter **>
      @id filter_concat
      @type concat
      key message
      multiline_end_regexp /\n$/
      separator ""
    </filter>

    <filter *.**>
      @type record_transformer
      <record>
        fluentdhost ${hostname}
        environment lint-staging
        log_type kubernetes
      </record>
    </filter>

    # Enriches records with Kubernetes metadata
    <filter kubernetes.**>
      @id filter_kubernetes_metadata
      @type kubernetes_metadata
      watch false
    </filter>

    <match **>
      @type vmware_log_intelligence
      endpoint_url {{ .Values.vrlic.scheme }}://{{ .Values.vrlic.host }}:{{ .Values.vrlic.port }}/le-mans/v1/streams/ingestion-pipeline-stream
      verify_ssl {{ .Values.vrlic.sslVerify }}
      <headers>
        Content-Type application/json
        Authorization Bearer {{ .Values.vrlic.apiKey }}
        structure simple
      </headers>
      <buffer>
        chunk_limit_records 300
        flush_interval 3s
        retry_max_times 3
      </buffer>
      <format>
        @type json
        tag_key text
      </format>
    </match>

